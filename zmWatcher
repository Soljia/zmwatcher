#!/usr/bin/perl -w

use strict;

use ZoneMinder;

$| = 1;

my $db = 'zm'; #Zoneminder database name
my $host = 'localhost'; #Zoneminder database server
my $user = 'zabbix'; #Zoneminder database read only account
my $pass = 'zabbix'; #Zoneminder database read only password
my $hostname = 'Hostname'; #Zabbix front-end defined hostname for Zoneminder server
my $dsn = "DBI:mysql:$db;host=$host"; #DSN
my $zabbix_server = '192.168.1.254'; #Zabbix server
my $max_update_interval = '3540'; #Update interval in seconds for Active/Signal/State

#Discovery command for Zabbix
my $cmdDiscovery = "zabbix_sender -z $zabbix_server -s $hostname -k zoneminder.monitor.discovery -o '{\"data\":[{\"{\#MONITOR}\":\"%s\"}]}'";
#Data update for Zoneminder into Zabbix
my $command = "zabbix_sender -z $zabbix_server -s $hostname -k zoneminder.monitor[%s,%s] -o %d";
#SQL query to find all defined monitors
my $sql = "SELECT * FROM Monitors";

#Init some arrays
my @monitors = ();
my @monitors_states = ();
my @monitors_signal = ();
my @monitors_active = ();

# Will update $monitors
sub get_monitors {

    #Connect and get data
    my $dbh = DBI->connect($dsn, $user, $pass);
    my $sth = $dbh->prepare_cached( $sql ) or die( "Can't prepare '$sql': ".$dbh->errstr() );
    my $res = $sth->execute() or die( "Can't execute '$sql': ".$sth->errstr() );

    #Temp array and fill
    my @new_monitors = ();
    while ( my $monitor = $sth->fetchrow_hashref() )
    {
        push( @new_monitors, $monitor );
    }

    #Put temp array into working array
    @monitors = @new_monitors;

    #Disconnect for sql server
    $dbh->disconnect;
}

#I'm new to perl, and this is how I'm handling noval
sub noval_iszero {
    if ( not defined ($_[0]) )
    {
        return 0;
    }
    return $_[0];
}

#Update monitors
get_monitors();

# Get initial readings
foreach my $x (0..$#monitors)
{
    my $monitor = $monitors[$x];

    push( @monitors_states, noval_iszero( zmGetMonitorState ( $monitor )));
    push( @monitors_signal, noval_iszero( zmMemRead ( $monitor, "shared_data:signal" )));
    push( @monitors_active, noval_iszero( zmMemRead ( $monitor, "shared_data:active" )));

    system( sprintf($cmdDiscovery, $monitor->{Name}) );
    system( sprintf($command , $monitor->{Name} , "state", $monitors_states[$x]) );
    system( sprintf($command , $monitor->{Name} , "signal", $monitors_signal[$x]) );
    system( sprintf($command , $monitor->{Name} , "active", $monitors_active[$x]) );
}

my $start = time;

#infinite Loop
while( 1 )
{
    print ( sprintf("Seconds until next update: %d\n",$max_update_interval - (time-$start) ));
    #Loop each monitor
    foreach my $monitor_count (0..$#monitors)
    {
        my $updated = 0;
        my $monitor = $monitors[ $monitor_count ];

        # Get the monitor info
	my $new_signal = noval_iszero( zmMemRead ( $monitor, "shared_data:signal" ));
	my $new_active = noval_iszero( zmMemRead ( $monitor, "shared_data:active" ));
        my $new_state =  noval_iszero( zmGetMonitorState ( $monitor ));
        print ( "$monitor->{Name}\tNew Signal: $new_signal\tNew Active: $new_active\tNew State: $new_state\n" );
	
        # If it is different to the currently cached signal
        if ( $monitors_signal [ $monitor_count ] != $new_signal || (time - $start) > $max_update_interval )
        {
                system( sprintf($command, $monitor->{Name} , "signal", $new_signal ));

                # Cache this new state.
                $monitors_signal [ $monitor_count ] = $new_signal;
        
                $updated = 1;
        }

        # If it is different to the currently cached active
        if ( $monitors_active [ $monitor_count ] != $new_active || (time - $start) > $max_update_interval )
        {
                system( sprintf($command, $monitor->{Name} , "active", $new_active ));

                # Cache this new active.
                $monitors_active [ $monitor_count ] = $new_active;

                $updated = 1;
        }


        # If it is different to the currently cached state;
        if ( $monitors_states [ $monitor_count ] != $new_state || (time - $start) > $max_update_interval )
        {
                system( sprintf($command, $monitor->{Name} , "state", $new_state ));

                # Cache this new state.
                $monitors_states [ $monitor_count ] = $new_state;

                $updated = 1;
        }

        if ( $updated )
        {
            #Reset last update time
            $start = time;
        }
    }
    #Get update monitors
    get_monitors();

    #Wait 10 seconds between checks
    sleep( 10 );
}
